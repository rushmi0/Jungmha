/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import nu.studer.sample.Keys;
import nu.studer.sample.Public;
import nu.studer.sample.tables.records.DogwalkersRecord;

import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Dogwalkers extends TableImpl<DogwalkersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.dogwalkers</code>
     */
    public static final Dogwalkers DOGWALKERS = new Dogwalkers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DogwalkersRecord> getRecordType() {
        return DogwalkersRecord.class;
    }

    /**
     * The column <code>public.dogwalkers.walker_id</code>.
     */
    public final TableField<DogwalkersRecord, Integer> WALKER_ID = createField(DSL.name("walker_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.dogwalkers.user_id</code>.
     */
    public final TableField<DogwalkersRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.dogwalkers.location_name</code>.
     */
    public final TableField<DogwalkersRecord, String> LOCATION_NAME = createField(DSL.name("location_name"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.field(DSL.raw("'N/A'::character varying"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.dogwalkers.id_card_number</code>.
     */
    public final TableField<DogwalkersRecord, Long> ID_CARD_NUMBER = createField(DSL.name("id_card_number"), SQLDataType.BIGINT.defaultValue(DSL.field(DSL.raw("0"), SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.dogwalkers.verification</code>.
     */
    public final TableField<DogwalkersRecord, String> VERIFICATION = createField(DSL.name("verification"), SQLDataType.VARCHAR(255).defaultValue(DSL.field(DSL.raw("'false'::character varying"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.dogwalkers.price_small</code>.
     */
    public final TableField<DogwalkersRecord, Integer> PRICE_SMALL = createField(DSL.name("price_small"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.dogwalkers.price_medium</code>.
     */
    public final TableField<DogwalkersRecord, Integer> PRICE_MEDIUM = createField(DSL.name("price_medium"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.dogwalkers.price_big</code>.
     */
    public final TableField<DogwalkersRecord, Integer> PRICE_BIG = createField(DSL.name("price_big"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "");

    private Dogwalkers(Name alias, Table<DogwalkersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Dogwalkers(Name alias, Table<DogwalkersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.dogwalkers</code> table reference
     */
    public Dogwalkers(String alias) {
        this(DSL.name(alias), DOGWALKERS);
    }

    /**
     * Create an aliased <code>public.dogwalkers</code> table reference
     */
    public Dogwalkers(Name alias) {
        this(alias, DOGWALKERS);
    }

    /**
     * Create a <code>public.dogwalkers</code> table reference
     */
    public Dogwalkers() {
        this(DSL.name("dogwalkers"), null);
    }

    public <O extends Record> Dogwalkers(Table<O> child, ForeignKey<O, DogwalkersRecord> key) {
        super(child, key, DOGWALKERS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<DogwalkersRecord, Integer> getIdentity() {
        return (Identity<DogwalkersRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<DogwalkersRecord> getPrimaryKey() {
        return Keys.DOGWALKERS_PKEY;
    }

    @Override
    public List<UniqueKey<DogwalkersRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.DOGWALKERS_USER_ID_KEY);
    }

    @Override
    public List<ForeignKey<DogwalkersRecord, ?>> getReferences() {
        return Arrays.asList(Keys.DOGWALKERS__DOGWALKERS_USER_ID_FKEY);
    }

    private transient Userprofiles _userprofiles;

    /**
     * Get the implicit join path to the <code>public.userprofiles</code> table.
     */
    public Userprofiles userprofiles() {
        if (_userprofiles == null)
            _userprofiles = new Userprofiles(this, Keys.DOGWALKERS__DOGWALKERS_USER_ID_FKEY);

        return _userprofiles;
    }

    @Override
    public List<Check<DogwalkersRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("dogwalkers_id_card_number_check"), "((length(((id_card_number)::character varying)::text) = 10))", true),
            Internal.createCheck(this, DSL.name("dogwalkers_verification_check"), "(((verification)::text = ANY ((ARRAY['true'::character varying, 'false'::character varying])::text[])))", true)
        );
    }

    @Override
    public Dogwalkers as(String alias) {
        return new Dogwalkers(DSL.name(alias), this);
    }

    @Override
    public Dogwalkers as(Name alias) {
        return new Dogwalkers(alias, this);
    }

    @Override
    public Dogwalkers as(Table<?> alias) {
        return new Dogwalkers(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Dogwalkers rename(String name) {
        return new Dogwalkers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Dogwalkers rename(Name name) {
        return new Dogwalkers(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Dogwalkers rename(Table<?> name) {
        return new Dogwalkers(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, Integer, String, Long, String, Integer, Integer, Integer> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super Integer, ? super Integer, ? super String, ? super Long, ? super String, ? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super Integer, ? super Integer, ? super String, ? super Long, ? super String, ? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
