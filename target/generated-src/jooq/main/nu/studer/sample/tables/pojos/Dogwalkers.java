/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables.pojos;


import java.io.Serializable;

import nu.studer.sample.enums.Verify;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Dogwalkers implements Serializable {

    private static final long serialVersionUID = 1L;

    private final Integer walkerId;
    private final Integer userId;
    private final String locationName;
    private final Long idCardNumber;
    private final Verify verification;
    private final Integer priceSmall;
    private final Integer priceMedium;
    private final Integer priceBig;

    public Dogwalkers(Dogwalkers value) {
        this.walkerId = value.walkerId;
        this.userId = value.userId;
        this.locationName = value.locationName;
        this.idCardNumber = value.idCardNumber;
        this.verification = value.verification;
        this.priceSmall = value.priceSmall;
        this.priceMedium = value.priceMedium;
        this.priceBig = value.priceBig;
    }

    public Dogwalkers(
        Integer walkerId,
        Integer userId,
        String locationName,
        Long idCardNumber,
        Verify verification,
        Integer priceSmall,
        Integer priceMedium,
        Integer priceBig
    ) {
        this.walkerId = walkerId;
        this.userId = userId;
        this.locationName = locationName;
        this.idCardNumber = idCardNumber;
        this.verification = verification;
        this.priceSmall = priceSmall;
        this.priceMedium = priceMedium;
        this.priceBig = priceBig;
    }

    /**
     * Getter for <code>public.dogwalkers.walker_id</code>.
     */
    public Integer getWalkerId() {
        return this.walkerId;
    }

    /**
     * Getter for <code>public.dogwalkers.user_id</code>.
     */
    public Integer getUserId() {
        return this.userId;
    }

    /**
     * Getter for <code>public.dogwalkers.location_name</code>.
     */
    public String getLocationName() {
        return this.locationName;
    }

    /**
     * Getter for <code>public.dogwalkers.id_card_number</code>.
     */
    public Long getIdCardNumber() {
        return this.idCardNumber;
    }

    /**
     * Getter for <code>public.dogwalkers.verification</code>.
     */
    public Verify getVerification() {
        return this.verification;
    }

    /**
     * Getter for <code>public.dogwalkers.price_small</code>.
     */
    public Integer getPriceSmall() {
        return this.priceSmall;
    }

    /**
     * Getter for <code>public.dogwalkers.price_medium</code>.
     */
    public Integer getPriceMedium() {
        return this.priceMedium;
    }

    /**
     * Getter for <code>public.dogwalkers.price_big</code>.
     */
    public Integer getPriceBig() {
        return this.priceBig;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Dogwalkers other = (Dogwalkers) obj;
        if (this.walkerId == null) {
            if (other.walkerId != null)
                return false;
        }
        else if (!this.walkerId.equals(other.walkerId))
            return false;
        if (this.userId == null) {
            if (other.userId != null)
                return false;
        }
        else if (!this.userId.equals(other.userId))
            return false;
        if (this.locationName == null) {
            if (other.locationName != null)
                return false;
        }
        else if (!this.locationName.equals(other.locationName))
            return false;
        if (this.idCardNumber == null) {
            if (other.idCardNumber != null)
                return false;
        }
        else if (!this.idCardNumber.equals(other.idCardNumber))
            return false;
        if (this.verification == null) {
            if (other.verification != null)
                return false;
        }
        else if (!this.verification.equals(other.verification))
            return false;
        if (this.priceSmall == null) {
            if (other.priceSmall != null)
                return false;
        }
        else if (!this.priceSmall.equals(other.priceSmall))
            return false;
        if (this.priceMedium == null) {
            if (other.priceMedium != null)
                return false;
        }
        else if (!this.priceMedium.equals(other.priceMedium))
            return false;
        if (this.priceBig == null) {
            if (other.priceBig != null)
                return false;
        }
        else if (!this.priceBig.equals(other.priceBig))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.walkerId == null) ? 0 : this.walkerId.hashCode());
        result = prime * result + ((this.userId == null) ? 0 : this.userId.hashCode());
        result = prime * result + ((this.locationName == null) ? 0 : this.locationName.hashCode());
        result = prime * result + ((this.idCardNumber == null) ? 0 : this.idCardNumber.hashCode());
        result = prime * result + ((this.verification == null) ? 0 : this.verification.hashCode());
        result = prime * result + ((this.priceSmall == null) ? 0 : this.priceSmall.hashCode());
        result = prime * result + ((this.priceMedium == null) ? 0 : this.priceMedium.hashCode());
        result = prime * result + ((this.priceBig == null) ? 0 : this.priceBig.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Dogwalkers (");

        sb.append(walkerId);
        sb.append(", ").append(userId);
        sb.append(", ").append(locationName);
        sb.append(", ").append(idCardNumber);
        sb.append(", ").append(verification);
        sb.append(", ").append(priceSmall);
        sb.append(", ").append(priceMedium);
        sb.append(", ").append(priceBig);

        sb.append(")");
        return sb.toString();
    }
}
