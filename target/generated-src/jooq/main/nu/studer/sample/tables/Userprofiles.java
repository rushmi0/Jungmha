/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import nu.studer.sample.Keys;
import nu.studer.sample.Public;
import nu.studer.sample.tables.records.UserprofilesRecord;

import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function10;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Userprofiles extends TableImpl<UserprofilesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.userprofiles</code>
     */
    public static final Userprofiles USERPROFILES = new Userprofiles();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserprofilesRecord> getRecordType() {
        return UserprofilesRecord.class;
    }

    /**
     * The column <code>public.userprofiles.user_id</code>.
     */
    public final TableField<UserprofilesRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.userprofiles.image_profile</code>.
     */
    public final TableField<UserprofilesRecord, String> IMAGE_PROFILE = createField(DSL.name("image_profile"), SQLDataType.VARCHAR(255).defaultValue(DSL.field(DSL.raw("'N/A'::character varying"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.userprofiles.username</code>.
     */
    public final TableField<UserprofilesRecord, String> USERNAME = createField(DSL.name("username"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.userprofiles.first_name</code>.
     */
    public final TableField<UserprofilesRecord, String> FIRST_NAME = createField(DSL.name("first_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.userprofiles.last_name</code>.
     */
    public final TableField<UserprofilesRecord, String> LAST_NAME = createField(DSL.name("last_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.userprofiles.email</code>.
     */
    public final TableField<UserprofilesRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.userprofiles.phone_number</code>.
     */
    public final TableField<UserprofilesRecord, String> PHONE_NUMBER = createField(DSL.name("phone_number"), SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>public.userprofiles.authen_key</code>.
     */
    public final TableField<UserprofilesRecord, String> AUTHEN_KEY = createField(DSL.name("authen_key"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.userprofiles.created_at</code>.
     */
    public final TableField<UserprofilesRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.userprofiles.user_type</code>.
     */
    public final TableField<UserprofilesRecord, String> USER_TYPE = createField(DSL.name("user_type"), SQLDataType.VARCHAR(255), this, "");

    private Userprofiles(Name alias, Table<UserprofilesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Userprofiles(Name alias, Table<UserprofilesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.userprofiles</code> table reference
     */
    public Userprofiles(String alias) {
        this(DSL.name(alias), USERPROFILES);
    }

    /**
     * Create an aliased <code>public.userprofiles</code> table reference
     */
    public Userprofiles(Name alias) {
        this(alias, USERPROFILES);
    }

    /**
     * Create a <code>public.userprofiles</code> table reference
     */
    public Userprofiles() {
        this(DSL.name("userprofiles"), null);
    }

    public <O extends Record> Userprofiles(Table<O> child, ForeignKey<O, UserprofilesRecord> key) {
        super(child, key, USERPROFILES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<UserprofilesRecord, Integer> getIdentity() {
        return (Identity<UserprofilesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<UserprofilesRecord> getPrimaryKey() {
        return Keys.USERPROFILES_PKEY;
    }

    @Override
    public List<UniqueKey<UserprofilesRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.USERPROFILES_USERNAME_KEY, Keys.USERPROFILES_EMAIL_KEY, Keys.USERPROFILES_PHONE_NUMBER_KEY);
    }

    @Override
    public List<Check<UserprofilesRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("userprofiles_email_check"), "(((email)::text ~~ '%_@_%._%'::text))", true),
            Internal.createCheck(this, DSL.name("userprofiles_user_type_check"), "(((user_type)::text = ANY ((ARRAY['Normal'::character varying, 'DogWalkers'::character varying])::text[])))", true)
        );
    }

    @Override
    public Userprofiles as(String alias) {
        return new Userprofiles(DSL.name(alias), this);
    }

    @Override
    public Userprofiles as(Name alias) {
        return new Userprofiles(alias, this);
    }

    @Override
    public Userprofiles as(Table<?> alias) {
        return new Userprofiles(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Userprofiles rename(String name) {
        return new Userprofiles(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Userprofiles rename(Name name) {
        return new Userprofiles(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Userprofiles rename(Table<?> name) {
        return new Userprofiles(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Integer, String, String, String, String, String, String, String, OffsetDateTime, String> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function10<? super Integer, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super OffsetDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function10<? super Integer, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super OffsetDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
