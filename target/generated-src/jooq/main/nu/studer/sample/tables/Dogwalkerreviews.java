/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import nu.studer.sample.Keys;
import nu.studer.sample.Public;
import nu.studer.sample.tables.records.DogwalkerreviewsRecord;

import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Dogwalkerreviews extends TableImpl<DogwalkerreviewsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.dogwalkerreviews</code>
     */
    public static final Dogwalkerreviews DOGWALKERREVIEWS = new Dogwalkerreviews();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DogwalkerreviewsRecord> getRecordType() {
        return DogwalkerreviewsRecord.class;
    }

    /**
     * The column <code>public.dogwalkerreviews.review_id</code>.
     */
    public final TableField<DogwalkerreviewsRecord, Integer> REVIEW_ID = createField(DSL.name("review_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.dogwalkerreviews.walker_id</code>.
     */
    public final TableField<DogwalkerreviewsRecord, Integer> WALKER_ID = createField(DSL.name("walker_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.dogwalkerreviews.user_id</code>.
     */
    public final TableField<DogwalkerreviewsRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.dogwalkerreviews.rating</code>.
     */
    public final TableField<DogwalkerreviewsRecord, Integer> RATING = createField(DSL.name("rating"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.dogwalkerreviews.review_text</code>.
     */
    public final TableField<DogwalkerreviewsRecord, String> REVIEW_TEXT = createField(DSL.name("review_text"), SQLDataType.VARCHAR(500), this, "");

    private Dogwalkerreviews(Name alias, Table<DogwalkerreviewsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Dogwalkerreviews(Name alias, Table<DogwalkerreviewsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.dogwalkerreviews</code> table reference
     */
    public Dogwalkerreviews(String alias) {
        this(DSL.name(alias), DOGWALKERREVIEWS);
    }

    /**
     * Create an aliased <code>public.dogwalkerreviews</code> table reference
     */
    public Dogwalkerreviews(Name alias) {
        this(alias, DOGWALKERREVIEWS);
    }

    /**
     * Create a <code>public.dogwalkerreviews</code> table reference
     */
    public Dogwalkerreviews() {
        this(DSL.name("dogwalkerreviews"), null);
    }

    public <O extends Record> Dogwalkerreviews(Table<O> child, ForeignKey<O, DogwalkerreviewsRecord> key) {
        super(child, key, DOGWALKERREVIEWS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<DogwalkerreviewsRecord, Integer> getIdentity() {
        return (Identity<DogwalkerreviewsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<DogwalkerreviewsRecord> getPrimaryKey() {
        return Keys.DOGWALKERREVIEWS_PKEY;
    }

    @Override
    public List<ForeignKey<DogwalkerreviewsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.DOGWALKERREVIEWS__DOGWALKERREVIEWS_WALKER_ID_FKEY, Keys.DOGWALKERREVIEWS__DOGWALKERREVIEWS_USER_ID_FKEY);
    }

    private transient Dogwalkers _dogwalkers;
    private transient Userprofiles _userprofiles;

    /**
     * Get the implicit join path to the <code>public.dogwalkers</code> table.
     */
    public Dogwalkers dogwalkers() {
        if (_dogwalkers == null)
            _dogwalkers = new Dogwalkers(this, Keys.DOGWALKERREVIEWS__DOGWALKERREVIEWS_WALKER_ID_FKEY);

        return _dogwalkers;
    }

    /**
     * Get the implicit join path to the <code>public.userprofiles</code> table.
     */
    public Userprofiles userprofiles() {
        if (_userprofiles == null)
            _userprofiles = new Userprofiles(this, Keys.DOGWALKERREVIEWS__DOGWALKERREVIEWS_USER_ID_FKEY);

        return _userprofiles;
    }

    @Override
    public List<Check<DogwalkerreviewsRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("dogwalkerreviews_rating_check"), "(((rating >= 1) AND (rating <= 5)))", true)
        );
    }

    @Override
    public Dogwalkerreviews as(String alias) {
        return new Dogwalkerreviews(DSL.name(alias), this);
    }

    @Override
    public Dogwalkerreviews as(Name alias) {
        return new Dogwalkerreviews(alias, this);
    }

    @Override
    public Dogwalkerreviews as(Table<?> alias) {
        return new Dogwalkerreviews(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Dogwalkerreviews rename(String name) {
        return new Dogwalkerreviews(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Dogwalkerreviews rename(Name name) {
        return new Dogwalkerreviews(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Dogwalkerreviews rename(Table<?> name) {
        return new Dogwalkerreviews(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Integer, Integer, Integer, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
